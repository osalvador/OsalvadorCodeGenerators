%@ template
    name=jdbctemplate-dao-interface-template
%>
<%! pk   javaPojoGen.column_tt := javaPojoGen.get_pk_columns ('${table_name}', '${unque_key}'); %>
<%! c pls_integer; %>
<%! procedure sep (p_cont in pls_integer, p_delimiter in varchar2)
    as
    begin
         if p_cont > 1
         then
               teplsql.p(p_delimiter);
         end if;
    end; %>
import java.util.List;
<%= javaPojoGen.get_java_imports(pk) %>
\\n
/**
 * Interface for a Data Access Object that can be used for a single specific type domain object ${className}.
 * 
 * @author osalvador
 * 
 */
public interface ${className}Dao {

    /*
    * class ${className}Dao
    * Generated with: javaPojoGen
    * Website: github.com/osalvador/OsalvadorCodeGenerators
    * Created On: ${date}
	*/
	
	/**
	 * Get a list of all ${className}.
	 */
	public List<${className}> findAll();

	/**
	 * Get the ${className} with the specified id
     <% c := pk.last+1; for i in 1 .. pk.last loop %>
     * @param <%=pk(i).COLUMN_NAME %> primary key value 
     <% end loop; %>
	 */
	public ${className} find(<% c := pk.last+1; for i in 1 .. pk.last loop %>
<%=  pk(i).data_type%> <%=pk(i).COLUMN_NAME %><%sep(c-i,',');%> <% end loop; %>);


    /**
     * Get the ${className} with the specified item
     * @param item the specified item
     */
    public ${className} find(${className} item);

	/**
	 * Returns the total number of results.
	 */
	public long count();
	
	/**
	 * Add the specified ${className} as a new entry in the database.
     * @param item the specified item to create    
	 */
	public void create(${className} item);
	
	/**
	 * Update the corresponding ${className} in the database with the properties of the specified object.
     * @param item the specified item to update    
	 */
	public void update(${className} item);
	
	/**
	 * Remove the specified ${className} from the database.
     * @param item the specified item to delete    
	 */
	public void delete(${className} item);
	
}