CREATE OR REPLACE PACKAGE javaPojoGen authid current_user
AS

   /**
   * javaPojoGen
   * Generated by: Oscar Salvador Magallanes
   * Website: github.com/osalvador/javaPojoGenerator
   * Version: 0.1
   */

   --Global public data structures
   SUBTYPE dbo_name_t IS VARCHAR2 (30); -- Max size for a DB object name

   TYPE dbo_name_aat IS TABLE OF dbo_name_t;

    TYPE column_rt
    IS
      RECORD (
         table_name        user_tab_columns.table_name%TYPE
       , column_name       user_tab_columns.column_name%TYPE
       , nullable          user_tab_columns.nullable%TYPE
       , constraint_type   user_constraints.constraint_type%TYPE
       , data_type         user_tab_columns.data_type%TYPE
      );

   --Collection types (record)
   TYPE column_tt IS TABLE OF column_rt;

   TYPE constraint_tt IS TABLE OF user_constraints%ROWTYPE;

   /**
   * Create PL/SQL Table API
   *
   * @param     p_table_name              must be NOT NULL
   * @param     p_unique_key              If the table has no primary key, it indicates the column that will be used as a unique key
   */
   FUNCTION create_java_pojo ( p_table_name               IN VARCHAR2                                
                             , p_unique_key               IN VARCHAR2 DEFAULT NULL
                             , p_template                 IN VARCHAR2 DEFAULT 'pojo-template')
      RETURN CLOB;

   --Public functions but for internal use.
   FUNCTION get_all_columns (p_tab_name VARCHAR2)
      RETURN column_tt;

   FUNCTION get_pk_columns (p_tab_name VARCHAR2)
      RETURN column_tt;

   FUNCTION to_camel_case (p_stirng VARCHAR2)
      RETURN VARCHAR2;

    FUNCTION to_java_type (p_data_type VARCHAR2)
        RETURN VARCHAR2;
    
    FUNCTION upper_first (p_string VARCHAR2)
        RETURN VARCHAR2;
        

--Spec Template
$if false $then
<%@ template
    name=pojo-template
%>
<%! col      javaPojoGen.column_tt := javaPojoGen.get_all_columns ('${table_name}'); %>
<%! pk       javaPojoGen.column_tt := javaPojoGen.get_pk_columns ('${table_name}'); %>
<%! c pls_integer; %>
<%! /* Separator procedure */
    procedure sep (p_cont in pls_integer, p_delimiter in varchar2)
    as
    begin
         if p_cont > 1
         then
               teplsql.p(p_delimiter);
         end if;
    end; %>
<%! function uf (p_in in varchar2) return varchar2
    as
    begin
        return javaPojoGen.upper_first(p_in);
    end;%>
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;

public class ${className} implements Serializable {

    /**
    * class ${className}
    * Generated with: javaPojoGen - DO NOT MODIFY!
    * Website: github.com/osalvador/javaPojoGenerator
    * Created On: ${date}
    */

    // Attributes
    <% c := col.last+1;
    for i in 1 .. col.last loop %>
    private <%= col(i).data_type%> <%= col(i).COLUMN_NAME%>;
    <% end loop; %>

    // Constructors
    public ${className}(){}
    
    public ${className}(<% c := pk.last+1; for i in 1 .. pk.last loop %>
<%=  pk(i).data_type%> <%=pk(i).COLUMN_NAME %><%sep(c-i,',');%><% end loop; %>) {
<% c := pk.last+1; for i in 1 .. pk.last loop %>
        this.<%=pk(i).COLUMN_NAME %> = <%=pk(i).COLUMN_NAME %>;
<% end loop; %>        
    }
    
    
    // Getters and Setters
    <% c := col.last+1;
    for i in 1 .. col.last loop %>
    public <%= col(i).data_type%> get<%= uf(col(i).COLUMN_NAME) %>(){
        return <%= col(i).COLUMN_NAME%>;
    }    
    public void set<%= uf(col(i).COLUMN_NAME) %>(<%= col(i).data_type%> <%= col(i).COLUMN_NAME%>) {
        this.<%= col(i).COLUMN_NAME%> = <%= col(i).COLUMN_NAME%>;
    }
    
    <% end loop; %>     
    
    @Override
    public String toString() {
        return "${className}{" +
                <% c := col.last+1; for i in 1 .. col.last loop %>
                "<%= col(i).COLUMN_NAME%>=" + <%= col(i).COLUMN_NAME%> + "<%sep(c-i,',');%>"+ 
                <% end loop; %>
                '}';
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ComIntAplDest that = (ComIntAplDest) o;
        <% c := pk.last+1; for i in 1 .. pk.last loop %>
        if (!get<%=uf(pk(i).COLUMN_NAME) %>().equals(that.get<%=uf(pk(i).COLUMN_NAME) %>())) return false;
        <% end loop; %>
        return true;        
    }

    @Override
    public int hashCode() {
        int result = 1;
        <% c := pk.last+1; for i in 1 .. pk.last loop %>
        result = 31 * result + get<%=uf(pk(i).COLUMN_NAME) %>().hashCode();
        <% end loop; %>
        return result;
    }
    
}
$end

END javaPojoGen;
/